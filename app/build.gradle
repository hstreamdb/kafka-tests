plugins {
    id 'application'
    id "com.diffplug.spotless" version "6.21.0"
    id "java"
    id "scala"
}

repositories {
    if (project.hasProperty("enableMavenLocal")) {
        project.logger.info("enabled mavenLocal")
        mavenLocal()
    }
    maven {
        url 'https://maven.aliyun.com/repository/public/'
    }
    maven {
        url 'https://maven.aliyun.com/repository/apache-snapshots'
    }
    mavenCentral()
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'
}

ext {
    versions = [:]
    libs = [:]
}

def DEFAULT_CLIENT_VERSION = "3.5.1"

// 0.11.0.3, 1.0.0, 1.1.1
def KAFKA_CLIENT_VERSION = DEFAULT_CLIENT_VERSION
if (System.getenv("KAFKA_CLIENT_VERSION") != null) {
    KAFKA_CLIENT_VERSION = System.getenv("KAFKA_CLIENT_VERSION")
}

// Add Scala version
def defaultScala213Version = '2.13.10'
if (hasProperty('scalaVersion')) {
    if (scalaVersion == '2.13') {
        versions["scala"] = defaultScala213Version
    }  else {
        versions["scala"] = scalaVersion
    }
} else {
    versions["scala"] = defaultScala213Version
}

/* Resolve base Scala version according to these patterns:
 1. generally available Scala versions (such as: 2.12.y and 2.13.z) corresponding base versions will be: 2.12 and 2.13 (respectively)
 2. pre-release Scala versions (i.e. milestone/rc, such as: 2.13.0-M5, 2.13.0-RC1, 2.14.0-M1, etc.) will have identical base versions;
 rationale: pre-release Scala versions are not binary compatible with each other and that's the reason why libraries include the full
 Scala release string in their name for pre-releases (see dependencies below with an artifact name suffix '_$versions.baseScala')
 */
if ( !versions.scala.contains('-') ) {
    versions["baseScala"] = versions.scala.substring(0, versions.scala.lastIndexOf("."))
} else {
    versions["baseScala"] = versions.scala
}
versions += [
    jackson: "2.13.5",
    jacksonDatabind: "2.13.5",
    junit: "5.9.3",
    scalaCollectionCompat: "2.10.0",
    scalaJava8Compat : "1.0.2"
]

dependencies {
    System.out.println("KAFKA_CLIENT_VERSION:" + KAFKA_CLIENT_VERSION)

    implementation "org.scala-lang:scala-library:$versions.scala"
    implementation "org.scala-lang.modules:scala-collection-compat_$versions.baseScala:$versions.scalaCollectionCompat"
    implementation "com.typesafe.scala-logging:scala-logging_$versions.baseScala:3.9.4"
    implementation "org.apache.kafka:kafka-clients:${KAFKA_CLIENT_VERSION}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson"
    implementation "com.fasterxml.jackson.core:jackson-databind:$versions.jacksonDatabind"
    // XXX: May be used in the future
     implementation "com.fasterxml.jackson.module:jackson-module-scala_$versions.baseScala:$versions.jackson"
     implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$versions.jackson"
     implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$versions.jackson"
     implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:$versions.jackson"

    implementation group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0.4'

    testImplementation "org.scala-lang:scala-library:$versions.scala"
    testImplementation "org.scala-lang.modules:scala-collection-compat_$versions.baseScala:$versions.scalaCollectionCompat"
    testImplementation "org.scala-lang.modules:scala-java8-compat_$versions.baseScala:$versions.scalaJava8Compat"
    testImplementation "org.apache.kafka:kafka-clients:${KAFKA_CLIENT_VERSION}"
    testImplementation "org.apache.kafka:kafka-clients:${KAFKA_CLIENT_VERSION}:test"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$versions.junit"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$versions.junit"
    testImplementation "org.testcontainers:testcontainers:1.19.0"
    testImplementation "org.testcontainers:toxiproxy:1.19.0"
    testImplementation "org.testcontainers:junit-jupiter:1.19.0"
    testImplementation 'com.github.docker-java:docker-java:3.3.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.yaml:snakeyaml:2.2'

    // lombok
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    compileOnly 'org.slf4j:slf4j-api:1.7.30'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'

    testImplementation "org.assertj:assertj-core:3.24.2"
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

spotless {
    java {
        googleJavaFormat()
    }

    groovyGradle {
        target '*.gradle'
        greclipse()
        indentWithSpaces()
    }
}

sourceSets {
    main {
        java {
            if (KAFKA_CLIENT_VERSION != DEFAULT_CLIENT_VERSION) {
                // FIXME: kafka tests is migrated from 3.5, which is not compatible with old version
                exclude "org/apache/kafka/**"
            }
        }

        scala {
            if (KAFKA_CLIENT_VERSION != DEFAULT_CLIENT_VERSION) {
                // FIXME: kafka tests is migrated from 3.5, which is not compatible with old version
                exclude "kafka/**"
                exclude "utils/**"
                exclude "hstream/**"
            }
        }
    }

    test {
        java {
            if (KAFKA_CLIENT_VERSION != DEFAULT_CLIENT_VERSION) {
                exclude 'io/hstream/kafka/testing/version_3_5/**'
            }
        }

        scala {
            if (KAFKA_CLIENT_VERSION != DEFAULT_CLIENT_VERSION) {
                // FIXME: kafka tests is migrated from 3.5, which is not compatible with old version
                exclude "integration/**"
                exclude "unit/**"
                exclude "utils/**"
                exclude "kafka/**"
                exclude "other/**"
            }
        }
    }
}
